local luagrapheme = require("luagrapheme")

describe("luagrapheme.is_grapheme_break", function()
   it("exists", function()
      assert.is_not_nil(luagrapheme.is_grapheme_break)
   end)

   it("errors when argument #1 is not a string", function()
      assert.has_error(function()
         luagrapheme.is_grapheme_break()
      end, "bad argument #1 to 'is_grapheme_break' (string expected, got no value)")
      assert.has_error(function()
         luagrapheme.is_grapheme_break(nil, 2)
      end, "bad argument #1 to 'is_grapheme_break' (string expected, got nil)")
   end)

   it("errors when argument #2 is not an integer", function()
      assert.has_error(function()
         luagrapheme.is_grapheme_break("hello")
      end, "bad argument #2 to 'is_grapheme_break' (number expected, got no value)")
      assert.has_error(function()
         luagrapheme.is_grapheme_break("hello", nil)
      end, "bad argument #2 to 'is_grapheme_break' (number expected, got nil)")
      assert.has_no_error(function()
         luagrapheme.is_grapheme_break("hello", 2)
      end)
      assert.has_no_error(function()
         luagrapheme.is_grapheme_break("hello", "2")
      end)
   end)

   it("errors when argument #2 is out of range", function()
      local err = "bad argument #2 to 'is_grapheme_break' (index out of range)"
      assert.has_error(function()
         luagrapheme.is_grapheme_break("hello", -1)
      end, err)
      assert.has_error(function()
         luagrapheme.is_grapheme_break("hello", 0)
      end, err)
      assert.has_error(function()
         luagrapheme.is_grapheme_break("hello", 7)
      end, err)
   end)

   it("works with an empty string", function()
      assert.is_true(luagrapheme.is_grapheme_break("", 1))
   end)

   it("works with ASCII text", function()
      assert.is_true(luagrapheme.is_grapheme_break("hello", 1))
      assert.is_true(luagrapheme.is_grapheme_break("hello", 2))
      assert.is_true(luagrapheme.is_grapheme_break("hello", 3))
      assert.is_true(luagrapheme.is_grapheme_break("hello", 4))
      assert.is_true(luagrapheme.is_grapheme_break("hello", 5))
      assert.is_true(luagrapheme.is_grapheme_break("hello", 6))
   end)

   it("works with multi-code point grapheme clusters", function()
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 1))
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 2))
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 3))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 4))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 5))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 6))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 7))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 8))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 9))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 10))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 11))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 12))
      assert.is_false(luagrapheme.is_grapheme_break("he👩‍🚀llo", 13))
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 14))
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 15))
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 16))
      assert.is_true(luagrapheme.is_grapheme_break("he👩‍🚀llo", 17))
   end)
end)
