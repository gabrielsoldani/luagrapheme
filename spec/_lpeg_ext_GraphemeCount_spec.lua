local _lpeg_ext_GraphemeCount = require("uni")._lpeg_ext_GraphemeCount

describe("uni._lpeg_ext_GraphemeCount", function()
   it("exists", function()
      assert.is_not_nil(_lpeg_ext_GraphemeCount)
   end)

   it("errors when argument #1 is not an integer", function()
      assert.has_error(function()
         _lpeg_ext_GraphemeCount(nil)
      end, "bad argument #1 to '_lpeg_ext_GraphemeCount' (number expected, got nil)")
      assert.has_no_error(function()
         _lpeg_ext_GraphemeCount("2")
      end)
   end)

   it("errors when argument #1 is less than or equal to 0", function()
      assert.has_error(function()
         _lpeg_ext_GraphemeCount(0)
      end, "bad argument #1 to '_lpeg_ext_GraphemeCount' (count must be positive)")
      assert.has_error(function()
         _lpeg_ext_GraphemeCount(-1)
      end, "bad argument #1 to '_lpeg_ext_GraphemeCount' (count must be positive)")
   end)

   describe("its closure", function()
      local oneGrapheme = _lpeg_ext_GraphemeCount(1)
      local twoGraphemes = _lpeg_ext_GraphemeCount(2)
      local threeGraphemes = _lpeg_ext_GraphemeCount(3)

      it("errors when argument #1 is not a string", function()
         assert.has_error(function()
            oneGrapheme(nil)
         end, "bad argument #1 to 'oneGrapheme' (string expected, got nil)")
      end)

      it("errors when argument #2 is not an integer", function()
         assert.has_error(function()
            oneGrapheme("hello", nil)
         end, "bad argument #2 to 'oneGrapheme' (number expected, got nil)")
         assert.has_no_error(function()
            oneGrapheme("hello", "2")
         end)
      end)

      it("errors when argument #2 is out of bounds", function()
         assert.has_error(function()
            oneGrapheme("hello", -1)
         end, "bad argument #2 to 'oneGrapheme' (index out of range)")
         assert.has_error(function()
            oneGrapheme("hello", 0)
         end, "bad argument #2 to 'oneGrapheme' (index out of range)")
         assert.has_error(function()
            oneGrapheme("hello", 7)
         end, "bad argument #2 to 'oneGrapheme' (index out of range)")
      end)

      it("does not error when argument #2 is 1 past the end of the string", function()
         assert.has_no_error(function()
            oneGrapheme("hello", 6)
         end)
      end)

      it("works with an empty string", function()
         assert.is.falsy(oneGrapheme("", 1))
      end)

      it("works with ASCII text", function()
         assert.are_equal(2, oneGrapheme("hi", 1))
         assert.are_equal(3, oneGrapheme("hi", 2))
         assert.is.falsy(oneGrapheme("hi", 3))

         assert.are_equal(3, twoGraphemes("hi", 1))
         assert.is.falsy(twoGraphemes("hi", 2))
         assert.is.falsy(twoGraphemes("hi", 3))
      end)

      it("works with multi-codepoint grapheme clusters", function()
         assert.are_equal(14, threeGraphemes("heüë©‚ÄçüöÄllo", 1))
         assert.are_equal(15, threeGraphemes("heüë©‚ÄçüöÄllo", 2))
         assert.are_equal(16, threeGraphemes("heüë©‚ÄçüöÄllo", 3))
         assert.are_equal(17, threeGraphemes("heüë©‚ÄçüöÄllo", 14))
      end)
   end)
end)
