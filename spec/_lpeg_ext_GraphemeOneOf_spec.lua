local _lpeg_ext_GraphemeOneOf = require("uni")._lpeg_ext_GraphemeOneOf

describe("uni._lpeg_ext_GraphemeOneOf", function()
   it("exists", function()
      assert.is_not_nil(_lpeg_ext_GraphemeOneOf)
   end)

   it("errors when there are no arguments", function()
      assert.has_error(function()
         _lpeg_ext_GraphemeOneOf()
      end, "expected at least 1 string argument")
   end)

   it("errors when an argument is not a string", function()
      assert.has_error(function()
         _lpeg_ext_GraphemeOneOf("h", nil)
      end, "bad argument #2 to '_lpeg_ext_GraphemeOneOf' (string expected, got nil)")
   end)

   it("errors when an argument is not 1 grapheme", function()
      assert.has_error(function()
         _lpeg_ext_GraphemeOneOf("hello")
      end, "bad argument #1 to '_lpeg_ext_GraphemeOneOf' (expected 1 grapheme, got many)")
      assert.has_error(function()
         _lpeg_ext_GraphemeOneOf("")
      end, "bad argument #1 to '_lpeg_ext_GraphemeOneOf' (expected 1 grapheme, got 0)")
      assert.has_no_error(function()
         _lpeg_ext_GraphemeOneOf("👩‍🚀")
      end)
   end)

   describe("its closure", function()
      it("errors when argument #1 is not a string", function()
         assert.has_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")(nil)
         end, "bad argument #1 to '?' (string expected, got nil)")
      end)

      it("errors when argument #2 is not an integer", function()
         assert.has_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")("hello", nil)
         end, "bad argument #2 to '?' (number expected, got nil)")
         assert.has_no_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")("hello", "2")
         end)
      end)

      it("errors when argument #2 is out of bounds", function()
         assert.has_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")("hello", -1)
         end, "bad argument #2 to '?' (index out of range)")
         assert.has_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")("hello", 0)
         end, "bad argument #2 to '?' (index out of range)")
         assert.has_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")("hello", 7)
         end, "bad argument #2 to '?' (index out of range)")
      end)

      it("does not error when argument #2 is 1 past the end of the string", function()
         assert.has_no_error(function()
            _lpeg_ext_GraphemeOneOf("👩‍🚀")("hello", 6)
         end)
      end)

      it("works with an empty string", function()
         assert.is.falsy(_lpeg_ext_GraphemeOneOf("h", "i")("", 1))
      end)

      it("works with ASCII text", function()
         local closure = _lpeg_ext_GraphemeOneOf("h", "i")
         assert.are_equal(2, closure("hi", 1))
         assert.are_equal(3, closure("hi", 2))
         assert.is.falsy(closure("hi", 3))
      end)

      it("works with multi-codepoint grapheme clusters", function()
         local closure = _lpeg_ext_GraphemeOneOf("👩‍🚀", "🌒", "o")
         assert.is_falsy(closure("he👩‍🚀llo", 1))
         assert.is_falsy(closure("he👩‍🚀llo", 2))
         assert.are_equal(14, closure("he👩‍🚀llo", 3))
         assert.is_falsy(closure("he👩‍🚀llo", 14))
         assert.is_falsy(closure("he👩‍🚀llo", 15))
         assert.are_equal(17, closure("he👩‍🚀llo", 16))
      end)

      it("should not do partial matches", function()
         -- 👩‍🚀 starts with 👩
         local woman = _lpeg_ext_GraphemeOneOf("👩")
         assert.is_falsy(woman("👩‍🚀", 1))
      end)
   end)
end)
