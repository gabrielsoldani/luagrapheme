local luagrapheme = require("luagrapheme")

describe("luagrapheme.graphemes", function()
   it("exists", function()
      assert.is_not_nil(luagrapheme.graphemes)
   end)

   it("errors when argument #1 is not a string", function()
      assert.has_error(function()
         luagrapheme.graphemes()
      end, "bad argument #1 to 'graphemes' (string expected, got no value)")
      assert.has_error(function()
         luagrapheme.graphemes(nil)
      end, "bad argument #1 to 'graphemes' (string expected, got nil)")
      assert.has_no_error(function()
         luagrapheme.graphemes("hello")
      end)
   end)

   it("returns a function", function()
      local next = luagrapheme.graphemes("hello")
      assert.is_function(next)
   end)

   it("works with an empty string", function()
      local next = luagrapheme.graphemes("")
      assert.is_nil(next())
   end)

   it("works with ASCII text", function()
      local next = luagrapheme.graphemes("hello")
      assert.are.equal("h", next())
      assert.are.equal("e", next())
      assert.are.equal("l", next())
      assert.are.equal("l", next())
      assert.are.equal("o", next())
      assert.is_nil(next())
   end)

   it("works with multi-code point grapheme clusters", function()
      local next = luagrapheme.graphemes("heüë©‚ÄçüöÄllo")
      assert.are.equal("h", next())
      assert.are.equal("e", next())
      assert.are.equal("üë©‚ÄçüöÄ", next())
      assert.are.equal("l", next())
      assert.are.equal("l", next())
      assert.are.equal("o", next())
      assert.is_nil(next())
   end)
end)
